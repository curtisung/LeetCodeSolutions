class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int

        Time complexity O(2n) = O(n)
        In best case, goes over each tile once (islands separated by one tile each in checkerboard pattern). 
        In worst case, goes over each tile twice (entire board is an island).
        """

        maxRowIndex = len(grid) -1
        maxColIndex = len(grid[0]) -1
        numIslands = 0

        def waterize(row, col):
            stack = [(row,col)]
            while len(stack) > 0:
                coords = stack.pop(-1)
                curRow, curCol = coords[0], coords[1]
                for deltaR, deltaC in [(-1,0),(1,0),(0,1),(0,-1)]:
                    nextRow = curRow + deltaR
                    nextCol = curCol + deltaC
                    if nextRow <= maxRowIndex and nextRow >= 0 and nextCol <= maxColIndex and nextCol >= 0 and grid[nextRow][nextCol] == "1":
                        stack.append( (nextRow, nextCol) )
                grid[curRow][curCol] = "0" 

        for curRow in range(len(grid)):
            for curCol in range(len(grid[0])):
                if grid[curRow][curCol] == "1":
                    waterize(curRow,curCol) # turns the island to water
                    numIslands += 1

        return numIslands
                    
