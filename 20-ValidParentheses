class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        
        Goal: give bool that indicates if parentheses are valid or not.
        Ever open bracket must be closed by its corresponding bracket in the order they appeared.
        
        Algo: Keep a stack that keeps track of the parentheses encountered and makes comparisons easy. Iterate through the string, and when we encounter a open Par, add it. Repeat for every succeeding one, if its a close bracket, compare to the top of the stack. 
            if match, pop it and move on
            else, return false.

        Edge cases: encounter close bracket before an open one.

        Psedo code:

        stack []
        for char in s:
            if char is open par:
                add to stack 
                continue
            if stack empty:
                add to stack
            else:
                compare char to top of stack.
                if char != type of parentheses on top of stack:
                    return false
                pop stack 
            
        if stack is non empty upon iterating over all, false

        """


        stack = []
        for char in s:
            if char == "(" or char == "{" or char == "[":
                stack.append(char)
                continue

            if not stack and (char ==  ")" or char == "]" or char == "}"):
                return False
                
            topChar = stack[-1]
            if ( char == ")" and topChar != "(") or (char == "}" and topChar != "{") or (char == "]" and topChar != "["):
                return False
            
            stack.pop(-1)
        
        if stack:
            return False
        return True
