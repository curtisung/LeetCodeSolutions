# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        
        BST: each node has a value, left and right pointer.
            right is greater than value
            left is less than value
        
        if both values are on opposite sides of the root, or if you found one of the targets, you found LCA!
        if both are less than the root, travel left
        if both are greater than root, go right
        """

        if root.val == p.val or root.val == q.val:
            print(root.val, p, q)
            return root
        
        if root.val > p.val and root.val > q.val:
            # go left
            return self.lowestCommonAncestor(root.left, p, q)
        elif root.val < p.val and root.val < q.val:
            # go right
            return self.lowestCommonAncestor(root.right, p, q)
        else:
            return root

